BiocManager::install("IRanges", version = "3.8")
BiocManager::install("GenomicFeatures", version = "3.8")
BiocManager::install("airway", version = "3.8")
BiocManager::install("airway", version = "3.8")
utils:::menuInstallPkgs()
search()
utils:::menuInstallPkgs()
BiocManager::install("airway", version = "3.8")
BiocManager::install("DESeq2", version = "3.8")
BiocManager::install("genefilter", version = "3.8")
remove.packages(c("Matrix", "mgcv", "survival"))
install.packages(c("Matrix", "mgcv", "survival"))
BiocManager::install("genefilter", version = "3.8")
library("airway")
library("gplots")
library("GenomicFeatures")
library("DESeq2")
library("pheatmap")
library("RColorBrewer")
library("ggplot2")
library("gplots")
library(BiocInstaller)
##Instalar pacotes fora do bioconductor
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("pheatmap")
install.packages("ggplot2")
install.packages("gplots")
library("airway")
library("gplots")
library("GenomicFeatures")
library("DESeq2")
library("pheatmap")
library("RColorBrewer")
library("ggplot2")
library("ggplot2")
library("genefilter")
search()
browseVignettes("airway")
browseVignettes("GenmicFeatures")
browseVignettes("GenomicFeatures")
df <- data.frame(x = 1:3, y = c(4, 1, 9))
df
base <- ggplot(df, aes(x, y)) + xlim(0.5, 3.5) + ylim(0, 10)
base
base +
geom_path(size = 10) +
geom_path(size = 1, colour = "red")
base +
geom_path(size = 10, lineend = "round") +
geom_path(size = 1, colour = "red")
base +
geom_path(size = 5, lineend = "round") +
geom_path(size = 1, colour = "red")
install.packages()
installed.packages()
?airway
data("airway")
ls()
se <- airway
se
str(se)
assay(se)
head(assay(se), 3)
head(assay(se), 1)
se
head(assay(se), 3)
head(assay(se), 2)
colSums(assay(se))
rowRanges(se)
metadata(rowRanges(se))
str(metadata(rowRanges(se)))
colData(se)
str(colData(se))
se$cell
se$dex
se$dex <- relevel(se$dex, "untrt")
se$dex
se
colData(se)
## Inicio expessao diferencial
countdata <- assay(se)
head(countdata, 3)
#Colocar count table em formato deseq2
ddsMat <- DESeqDataSetFromMatrix(countData = countdata, colData = coldata, design = ~ cell + dex )
coldata <- colData(se)
coldata
#Colocar count table em formato deseq2
ddsMat <- DESeqDataSetFromMatrix(countData = countdata, colData = coldata, design = ~ cell + dex )
nrow(ddsMat)
ddsMat
dds <- ddsMat[  rowSums(counts(ddsMat))> 5, ]
nrow(dds)
head(dds)
dds
rowSums(counts(ddsMat))
head(rowSums(counts(ddsMat)))
nrow(dds)
nrow(dds)
dds <- DESeq(dds)
dds
res <- results(dds, alpha=.05, lfcThreshold=1)
mcols(res, use.names=TRUE)
?results
res
summary(res)
?mcols
results(dds, contrast=c("cell", "N061011", "N61311"))
table(res$padj < .05)
table(res$padj < .01)
resSig <- subset(res, padj < 0.01)
head(resSig[ order(resSig$log2FoldChange, decreasing=TRUE), ])
## Transformacao rlog. Os valores de expressao muito baixos sao reduzidas em relacao as medias dos genes para todas as amostras
rld <- rlog(dds, blind=FALSE)
rld
head(assay(rld), 3)
mycol <- colorpanel(n=length(breaks)-1,low="blue",mid="white",high="red")
mycol <- colorpanel(n=length(10)-1,low="blue",mid="white",high="red")
mycol
mycol <- colorpanel(n=length(c(1:10))-1,low="blue",mid="white",high="red")
mycol
break<- seq(-10.5,10, by=0.01)
breaks <- seq(-10.5,10, by=0.01)
mycol <- colorpanel(n=length(breaks)-1,low="blue",mid="white",high="red")
mycol
head(resSig)
str(resSig)
mat <- assay(rld)[ rownames(resSig), ]
df <- as.data.frame(colData(rld)[,c("cell","dex")])
jpeg("/Users/mfariajr/Desktop/curso_R/heatmap_DEGs.jpeg", width = 6, height = 6, units = 'in', res = 500, pointsize = 12)
pheatmap(mat, annotation_col=df, scale="row", clustering_distance_rows="correlation", show_rownames=F, color=mycol)
dev.off()
pheatmap(mat, annotation_col=df, scale="row", clustering_distance_rows="correlation", show_rownames=F, color=mycol)
jpeg("/Users/mfariajr/Desktop/curso_R/heatmap_DEGs.jpeg", width = 6, height = 6, units = 'in', res = 500, pointsize = 12)
pheatmap(mat, annotation_col=df, scale="row", clustering_distance_rows="correlation", show_rownames=F, color=mycol)
data("airway")
se <- airway
se
head(assay(se), 3)
colSums(assay(se)) #somar reads quantificadas por amostra proprio r essta funcao
rowRanges(se)      #extrai as notacoes do gene
str(metadata(rowRanges(se)))  #retirada de metadados
colData(se)    #extrai os dados
se$cell
se$dex      #extraindo a coluna cell
se$dex <- relevel(se$dex, "untrt")
se$dex
## Inicio expessao diferencial
countdata <- assay(se)
head(countdata, 3)
coldata <- colData(se)
#Colocar count table em formato deseq2
ddsMat <- DESeqDataSetFromMatrix(countData = countdata, colData = coldata, design = ~ cell + dex ) #add o que quer a coluna
nrow(ddsMat)     #numeros de linha
#Remover genes com baixissima expressao
dds <- ddsMat[  rowSums(counts(ddsMat))> 5, ]  #remover os genes baixos pertence ao R nao ao biocond refernt as linha
nrow(dds)     #num. de linhas
#Normalizacao
dds <- DESeq(dds)    # normalizacao do que sobrou maior que 5
#Expressao diferencial
res <- results(dds, alpha=.05, lfcThreshold=1)   #respctiva de qualidade
mcols(res, use.names=TRUE)
summary(res)
#Expressao diferencial com o contraste referente ao tipo celular
results(dds, contrast=c("cell", "N061011", "N61311"))    #possso usar um contrast cell (N06 e N60311)
table(res$padj < .05)
#selecao genes com valor de p-ajustado < 0.01
resSig <- subset(res, padj < 0.01)
head(resSig[ order(resSig$log2FoldChange, decreasing=TRUE), ])  # ordenar por log2foldchang
## Transformacao rlog. Os valores de expressao muito baixos sao reduzidas em relacao as medias dos genes para todas as amostras
rld <- rlog(dds, blind=FALSE)
head(assay(rld), 3)
## Heatmap genes diferencialmente expressos
breaks <- seq(-10.5,10, by=0.01)
mycol <- colorpanel(n=length(breaks)-1,low="blue",mid="white",high="red") #criar sequencia de cores dados os valores criadaos low to high
mat <- assay(rld)[ rownames(resSig), ]
df <- as.data.frame(colData(rld)[,c("cell","dex")])
jpeg("/Users/mfariajr/Desktop/curso_R/heatmap_DEGs.jpeg", width = 6, height = 6, units = 'in', res = 500, pointsize = 12)
pheatmap(mat, annotation_col=df, scale="row", clustering_distance_rows="correlation", show_rownames=F, color=mycol)
data("airway")
se <- airway
se
head(assay(se), 3)
colSums(assay(se)) #somar reads quantificadas por amostra proprio r essta funcao
rowRanges(se)      #extrai as notacoes do gene
str(metadata(rowRanges(se)))  #retirada de metadados
colData(se)    #extrai os dados
se$cell
se$dex      #extraindo a coluna cell
se$dex <- relevel(se$dex, "untrt")
se$dex
## Inicio expessao diferencial
countdata <- assay(se)
head(countdata, 3)
coldata <- colData(se)
#Colocar count table em formato deseq2
ddsMat <- DESeqDataSetFromMatrix(countData = countdata, colData = coldata, design = ~ cell + dex ) #add o que quer a coluna
nrow(ddsMat)     #numeros de linha
#Remover genes com baixissima expressao
dds <- ddsMat[  rowSums(counts(ddsMat))> 5, ]  #remover os genes baixos pertence ao R nao ao biocond refernt as linha
nrow(dds)     #num. de linhas
#Normalizacao
dds <- DESeq(dds)    # normalizacao do que sobrou maior que 5
#Expressao diferencial
res <- results(dds, alpha=.05, lfcThreshold=1)   #respctiva de qualidade
mcols(res, use.names=TRUE)
summary(res)
#Expressao diferencial com o contraste referente ao tipo celular
results(dds, contrast=c("cell", "N061011", "N61311"))    #possso usar um contrast cell (N06 e N60311)
table(res$padj < .05)
#selecao genes com valor de p-ajustado < 0.01
resSig <- subset(res, padj < 0.01)
head(resSig[ order(resSig$log2FoldChange, decreasing=TRUE), ])  # ordenar por log2foldchang
## Transformacao rlog. Os valores de expressao muito baixos sao reduzidas em relacao as medias dos genes para todas as amostras
rld <- rlog(dds, blind=FALSE)
head(assay(rld), 3)
## Heatmap genes diferencialmente expressos
breaks <- seq(-10.5,10, by=0.01)
mycol <- colorpanel(n=length(breaks)-1,low="blue",mid="white",high="red") #criar sequencia de cores dados os valores criadaos low to high
library("airway")
library("gplots")
library("GenomicFeatures")
library("DESeq2")
library("pheatmap")
library("RColorBrewer")
library("ggplot2")
library("genefilter")
data("airway")
se <- airway
data("airway")
se <- airway)
data("airway")
se <- airway
se
head(assay(se), 3)
colSums(assay(se)) #somar reads quantificadas por amostra proprio r essta funcao
rowRanges(se)      #extrai as notacoes do gene
str(metadata(rowRanges(se)))  #retirada de metadados
colData(se)    #extrai os dados
se$cell
se$dex      #extraindo a coluna cell
se$dex <- relevel(se$dex, "untrt")
se$dex
## Inicio expessao diferencial
countdata <- assay(se)
head(countdata, 3)
coldata <- colData(se)
#Colocar count table em formato deseq2
ddsMat <- DESeqDataSetFromMatrix(countData = countdata, colData = coldata, design = ~ cell + dex ) #add o que quer a coluna
nrow(ddsMat)     #numeros de linha
#Remover genes com baixissima expressao
dds <- ddsMat[  rowSums(counts(ddsMat))> 5, ]  #remover os genes baixos pertence ao R nao ao biocond refernt as linha
nrow(dds)     #num. de linhas
#Normalizacao
dds <- DESeq(dds)    # normalizacao do que sobrou maior que 5
#Expressao diferencial
res <- results(dds, alpha=.05, lfcThreshold=1)   #respctiva de qualidade
mcols(res, use.names=TRUE)
summary(res)
#Expressao diferencial com o contraste referente ao tipo celular
results(dds, contrast=c("cell", "N061011", "N61311"))    #possso usar um contrast cell (N06 e N60311)
table(res$padj < .05)
#selecao genes com valor de p-ajustado < 0.01
resSig <- subset(res, padj < 0.01)
head(resSig[ order(resSig$log2FoldChange, decreasing=TRUE), ])  # ordenar por log2foldchang
## Transformacao rlog. Os valores de expressao muito baixos sao reduzidas em relacao as medias dos genes para todas as amostras
rld <- rlog(dds, blind=FALSE)
head(assay(rld), 3)
## Heatmap genes diferencialmente expressos
breaks <- seq(-10.5,10, by=0.01)
mycol <- colorpanel(n=length(breaks)-1,low="blue",mid="white",high="red") #criar sequencia de cores dados os valores criadaos low to high
mat <- assay(rld)[ rownames(resSig), ]
df <- as.data.frame(colData(rld)[,c("cell","dex")])
jpeg("/Users/mfariajr/Desktop/curso_R/heatmap_DEGs.jpeg", width = 6, height = 6, units = 'in', res = 500, pointsize = 12)
pheatmap(mat, annotation_col=df, scale="row", clustering_distance_rows="correlation", show_rownames=F, color=mycol)
?dev.off()
dev.next
#fazer volcano plot
#volcano plot
values <- cbind(FoldChange,testeT)
pheatmap(mat, annotation_col=df, scale="row", clustering_distance_rows="correlation", show_rownames=F, color=mycol)
dev.off()
#fazer volcano plot
#volcano plot
values <- cbind(FoldChange,testeT)
df
table(res$padj < .05)
#selecao genes com valor de p-ajustado < 0.01
resSig <- subset(res, padj < 0.01)
head(resSig[ order(resSig$log2FoldChange, decreasing=TRUE), ])  # ordenar por log2foldchang
mycol
mat
df
head(resSig)
jpeg("/Users/mfariajr/Desktop/curso_R/heatmap_DEGs2.jpeg", width = 6, height = 6, units = 'in', res = 500, pointsize = 12)
pheatmap(mat, annotation_col=df, scale="row", clustering_distance_rows="correlation", show_rownames=F, color=mycol)
mat
dev.off()
dev.off()
#abrir o vetor imagem resolution 500
jpeg("/Users/mfariajr/Desktop/curso_R/heatmap_DEGs3.jpeg", width = 6, height = 6, units = 'in', res = 500, pointsize = 12)
pheatmap(mat, annotation_col=df, scale="row", clustering_distance_rows="correlation", show_rownames=F, color=mycol)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
#fazer volcano plot
#volcano plot log2FoldChange
values <- cbind(res[,2],res[,6])
values
up=values[values[,1]> 2 & values[,2]<0.05, ]
down=values[values[,1]< 2 & values[,2]<0.05, ]
values[,1]
head(values)
plot(log2(values[,1]), -log10(values[,2]), xlab="log2(foldchange)",ylab="-log10(p-value)",col="black",pch=16,cex=1.5, xlim=c(-8,8),main="Case vs. Control" )
´values
if (length(up)>1){points(log2(up[,1]), -log10(up[,2]),pch=16,cex=1.5,col="dark red")}
if (length(down)>1){points(log2(down[,1]), -log10(down[,2]),pch=16,cex=1.5,col="dark green")}
down=values[values[,1]< 1 & values[,2]<0.05, ]
plot(log2(values[,1]), -log10(values[,2]), xlab="log2(foldchange)",ylab="-log10(p-value)",col="black",pch=16,cex=1.5, xlim=c(-8,8),main="Case vs. Control" )
if (length(up)>1){points(log2(up[,1]), -log10(up[,2]),pch=16,cex=1.5,col="dark red")}
if (length(down)>1){points(log2(down[,1]), -log10(down[,2]),pch=16,cex=1.5,col="dark green")}
if (length(down)<1){points(log2(down[,1]), -log10(down[,2]),pch=16,cex=1.5,col="dark green")}
#fazer volcano plot
#volcano plot log2FoldChange
values <- cbind(res[,2],res[,6])   #todos os genes observados
up=values[values[,1]> 1 & values[,2]<0.05, ]
down=values[values[,1]< 1 & values[,2]<0.05, ]
plot(log2(values[,1]), -log10(values[,2]), xlab="log2(foldchange)",ylab="-log10(p-value)",col="black",pch=16,cex=1.5, xlim=c(-8,8),main="Case vs. Control" )
down=values[values[,1]< 2 & values[,2]<0.05, ]
plot(log2(values[,1]), -log10(values[,2]), xlab="log2(foldchange)",ylab="-log10(p-value)",col="black",pch=16,cex=1.5, xlim=c(-8,8),main="Case vs. Control" )
dev.off()
values
up=values[values[,1]> 2 & values[,2]<0.05, ]
down=values[values[,1]< 2 & values[,2]<0.05, ]
plot(log2(values[,1]), -log10(values[,2]), xlab="log2(foldchange)",ylab="-log10(p-value)",col="black",pch=16,cex=1.5, xlim=c(-8,8),main="Case vs. Control" )
if (length(up)>1){points(log2(up[,1]), -log10(up[,2]),pch=16,cex=1.5,col="dark red")}
if (length(down)<1){points(log2(down[,1]), -log10(down[,2]),pch=16,cex=1.5,col="dark green")}
up=values[values[,1]> 1 & values[,2]<0.05, ]
down=values[values[,1]< 2 & values[,2]<0.05, ]
plot(log2(values[,1]), -log10(values[,2]), xlab="log2(foldchange)",ylab="-log10(p-value)",col="black",pch=16,cex=1.5, xlim=c(-8,8),main="Case vs. Control" )
if (length(up)>1){points(log2(up[,1]), -log10(up[,2]),pch=16,cex=1.5,col="dark red")}
if (length(down)<1){points(log2(down[,1]), -log10(down[,2]),pch=16,cex=1.5,col="dark green")}
up=values[values[,1]> 1 & values[,2]<0.05, ]
down=values[values[,1]< -1 & values[,2]<0.05, ]
plot(log2(values[,1]), -log10(values[,2]), xlab="log2(foldchange)",ylab="-log10(p-value)",col="black",pch=16,cex=1.5, xlim=c(-8,8),main="Case vs. Control" )
if (length(up)>1){points(log2(up[,1]), -log10(up[,2]),pch=16,cex=1.5,col="dark red")}
if (length(down)<1){points(log2(down[,1]), -log10(down[,2]),pch=16,cex=1.5,col="dark green")}
abline(h=-log10(0.05),col="black",lty=2)
abline(v=log2(2), col="black",lty=2)
abline(v=-log2(2), col="black",lty=2)
dev.off
dev.off
dev.off()
up=values[values[,1]> 1 & values[,2]<0.05, ]
down=values[values[,1]< -1 & values[,2]<0.05, ]
plot(log2(values[,1]), -log10(values[,2]), xlab="log2(foldchange)",ylab="-log10(p-value)",col="black",pch=16,cex=1.5, xlim=c(-8,8),main="Case vs. Control" )
res[,2]
res[,6]
if (length(up)>1){points(log2(up[,1]), -log10(up[,2]),pch=16,cex=1.5,col="dark red")}
if (length(down)<1){points(log2(down[,1]), -log10(down[,2]),pch=16,cex=1.5,col="dark green")}
abline(h=-log10(0.05),col="black",lty=2)
abline(v=log2(2), col="black",lty=2)
abline(v=-log2(2), col="black",lty=2)
#descobrir quais sao os 20 genes mais variaveis
topVarGenes <- head(order(rowVars(assay(rld)),decreasing=TRUE),20)
topVarGenes
up=values[values[,1]> 1 & values[,2]<0.05, ]
down=values[values[,1]< -1 & values[,2]<0.05, ]
plot(log2(values[,1]), -log10(values[,2]), xlab="log2(foldchange)",ylab="-log10(p-value)",col="black",pch=16,cex=1.5, xlim=c(-8,8),main="Case vs. Control" )
if (length(up)<1){points(log2(up[,1]), -log10(up[,2]),pch=16,cex=1.5,col="dark red")}
if (length(down)<1){points(log2(down[,1]), -log10(down[,2]),pch=16,cex=1.5,col="dark green")}
abline(h=-log10(0.05),col="black",lty=2)
abline(v=log2(2), col="black",lty=2)
dev.off()
dev.off()
#fazer volcano plot
#volcano plot log2FoldChange
values <- cbind(res[,2],res[,5])   #todos os genes observados
up=values[values[,1]> 1 & values[,2]<0.05, ]
down=values[values[,1]< -1 & values[,2]<0.05, ]
plot(log2(values[,1]), -log10(values[,2]), xlab="log2(foldchange)",ylab="-log10(p-value)",col="black",pch=16,cex=1.5, xlim=c(-8,8),main="Case vs. Control" )
if (length(up)<1){points(log2(up[,1]), -log10(up[,2]),pch=16,cex=1.5,col="dark red")}
if (length(down)<1){points(log2(down[,1]), -log10(down[,2]),pch=16,cex=1.5,col="dark green")}
abline(h=-log10(0.05),col="black",lty=2)
abline(v=log2(2), col="black",lty=2)
resSig
head(resSig)
head(res)
#fazer volcano plot
#volcano plot log2FoldChange
values <- cbind(resSig[,2],resSig[,3])   #todos os genes observados
up=values[values[,1]> 1 & values[,2]<0.05, ]
down=values[values[,1]< -1 & values[,2]<0.05, ]
plot(log2(values[,1]), -log10(values[,2]), xlab="log2(foldchange)",ylab="-log10(p-value)",col="black",pch=16,cex=1.5, xlim=c(-8,8),main="Case vs. Control" )
if (length(up)<1){points(log2(up[,1]), -log10(up[,2]),pch=16,cex=1.5,col="dark red")}
if (length(down)<1){points(log2(down[,1]), -log10(down[,2]),pch=16,cex=1.5,col="dark green")}
geneA <- c(84.334,90.455,34.989,43.222,23,25.424,0.568,0.349,45.984,62.847,17.233,12.085,72.692,4.297,36.592,49.849,96.765,19.364,28.428,1.376)
geneA
mode(geneA)
length(geneA)
vec <- c(84.334,90.455,34.989,43.222,23,25.424,0.568,0.349,45.984,62.847,17.233,12.085,72.692,4.297,36.592,49.849,96.765,19.364,28.428,1.376)
vec
length(vec)
sort( vec , decreasing = TRUE )
vec
sort( vec , decreasing = T )
sort( vec , decreasing = F )
sort( vec , creasing = F )
sort( vec , decreasing = T )
order(vec)
order(vec, decreasing = T)
vec[17]
vec[8]
round(vec)
vec
ls()
mpg
> library(nycflights13)
library(nycflights13)
mpg
library(gapminder)
mpg
library(Lahman)
mpg
install.packages("nycflights13")
install.packages("nycflights13")
install.packages("nycflights13")
install.packages("gapminder")
install.packages("Lahman")
mpg
mpg
install.packages("tidyverse")
mpg
library(tidyverse)
mpg
install.packages("nycflights13")
library(Lahman)
library(gapminder)
library(nycflights13)
getwd()
setwd("C:/Users/mfariajr/Desktop/dataScience")
getwd()
dir()
ggplot(data = mpg)+geom_point(mapping= aes(x=displ, y=hwy))
ggplot(data = mpg)+geom_point(mapping= aes(x=displ, y=hwy, color= class))
ggplot(data = mpg)+geom_point(mapping= aes(x=displ, y=hwy, alpha= class))
ggplot(data = mpg)+geom_point(mapping= aes(x=displ, y=hwy, shape= class))
ggplot(data = mpg)+geom_point(mapping= aes(x=displ, y=hwy, size= class))
ggplot(data = mpg)+geom_point(mapping= aes(x=displ, y=hwy), color= "blue")
ggplot(data = mpg)+geom_point(mapping= aes(x=displ, y=hwy, color= "blue"))
ggplot(data = mpg)+geom_point(mapping= aes(x=displ, y=hwy, color= "blue9"))
ggplot(data = mpg)+geom_point(mapping= aes(x=displ, y=hwy, color= "red"))
ggplot(data = mpg)+geom_point(mapping= aes(x=displ, y=hwy, color= "blue"))
ggplot(data = mpg)+geom_point(mapping= aes(x=displ, y=hwy, color= "gray"))
ggplot(data = mpg)+geom_point(mapping= aes(x=displ, y=hwy), color= "blue")
ggplot(data = mpg)+geom_point(mapping= aes(x=displ, y=hwy , alpha = class), color= "blue")
ggplot(data = mpg)+geom_point(mapping= aes(x=displ, y=hwy)) + facet_wrap(~ class, nrow = 2)
ggplot(data = mpg)+geom_smooth(mapping= aes(x=displ, y=hwy))
ggplot(data = mpg)+geom_smooth(mapping= aes(x=displ, y=hwy, linetype = drv))
gmp
mpg
help(mpg)
ggplot(data = mpg)+geom_smooth(mapping= aes(x=displ, y=hwy, linetype = drv))
ggplot(data = mpg)+geom_smooth(mapping= aes(x=displ, y=hwy, linetype = drv))+geom_point(mapping= aes(x=displ, y=hwy))
mode(mpg)
geneAzscore <- ( mpg["hwy"] - mean(mpg["hwy"]) ) / sd(mpg["hwy"])
mpg[hwy]
mpg::hwy
mpg
mpg(hwy)
mode(mpg)
mpg[3]
geneAzscore <- ( mpg[9] - mean(mpg[9]) ) / sd(mpg[9])
mpg[9]
mean(mpg[9])
var1<-mpg[9]
var1
var1[1]
var1[2]
var1[0]
mode(var1)
var1<-mpg[9][2]
mpg[9][3]
mode(mpg[9])
mpg[[9]][1]
mpg[[9]][1:4]
mpg[[9]][1:]
mpg[[9]][1:38]
mpg[[9]][1:39]
mpg[[9]][1:40]
mpg[[9]][1:41]
mpg[[9]][1:45]
mpg[[9]][1:234]
mpg[[9]][1:235]
mpg[[9]][1:234]
mpg[[9]][0:234]
mpg[[9]][1:234]
mean(mpg[[9]][1:234])
sd(mpg[[9]][1:234])
#z-score
zsc<-(mpg[[9]][1:234]-mean(mpg[[9]][1:234]))/sd(mpg[[9]][1:234])
zsc
err=1.96*sd(mpg[[9]][1:234])/sqrt(234)
err
mean(mpg[[9]][1:234])-err
mean(mpg[[9]][1:234])+err
mean(mpg[[9]][1:234])-err
order(zsc)
order(zsc,decreasing = T)
sort(zsc,decreasing = T)
